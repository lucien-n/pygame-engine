from scengine.vector2 import Vector2
from scengine.utils import log
from scengine.queue import Queue

from .chunk import Chunk
from .tile import Tile
from .matrices import render_distance_matrices


class World:
    def __init__(
        self, game: object, tile_size: int, chunk_size: int, world_size: int
    ) -> None:
        from test_game.main import Game

        self.GAME: Game = game

        self.TILE_SIZE = tile_size
        self.CHUNK_SIZE = chunk_size
        self.WORLD_SIZE = world_size

        self.GENERATED_CHUNKS: dict[tuple[int, int] : Chunk] = {}
        self.LOADED_CHUNKS_COORDINATES: list[tuple[int, int]] = []
        self.CHUNK_GENERATION_QUEUE = Queue()

    def update(self):
        """Updates the world and all of it's components"""
        self.LOADED_CHUNKS_COORDINATES.clear()

        # Generate chunk received from WorldProcess
        if "chunk" in self.GAME.WORLD_DATA:
            log("Main | Received & building ", self.GAME.WORLD_DATA["chunk"][0])
            self.build_chunk(self.GAME.WORLD_DATA["chunk"])

        # Render chunks & request generation to WorldProcess
        for distance in render_distance_matrices["diamond"]:
            for matrice in distance:
                chunk_coordinates: tuple = (
                    self.GAME.PLAYER.current_chunk[0] + matrice.x,
                    self.GAME.PLAYER.current_chunk[1] + matrice.y,
                )

                # Adds the chunk to the generation queue if it hasn't already been requested nor generated
                if not self.is_chunk_in_queue(
                    chunk_coordinates
                ) and not self.is_chunk_generated(chunk_coordinates):
                    self.CHUNK_GENERATION_QUEUE.add(chunk_coordinates)
                    log(
                        "Main | Added chunk ",
                        chunk_coordinates,
                        " to the generation queue",
                    )

                # Adds chunk to the loaded chunks if it has been generated
                if self.is_chunk_generated(
                    chunk_coordinates
                ) and not self.is_chunk_loaded(chunk_coordinates):
                    self.load_chunk(chunk_coordinates)
                    log("Main | Loaded chunk ", chunk_coordinates)

        # Update chunks
        log("Main | Updating chunks")
        [
            self.get_chunk(chunk_coordinates).update()
            for chunk_coordinates in self.LOADED_CHUNKS_COORDINATES
        ]

    def draw(self):
        """Draws the world and all of it's components"""
        # Draw chunks
        log("Main | Drawing chunks")
        [
            self.get_chunk(chunk_coordinates).draw()
            for chunk_coordinates in self.LOADED_CHUNKS_COORDINATES
        ]

    def build_chunk(
        self, raw_chunk_data: list[tuple[int, int], list[int, int, str]]
    ) -> None:
        """Builds a chunk from it's raw data

        Args:
            raw_chunk_data (list): raw chunk data generated by WorldProcess
        """
        chunk_coordinates = raw_chunk_data[0]
        raw_tiles_data = raw_chunk_data[1]

        # Build tiles
        tiles = []
        for raw_tile in raw_tiles_data:
            # in chunk coordinates
            tile_coordinates = (raw_tile[0], raw_tile[1])
            tile_sprite = self.GAME.SPRITES[raw_tile[2]]
            tile = Tile(tile_coordinates, tile_sprite)
            tiles.append(tile)

        chunk = Chunk(self.GAME, chunk_coordinates, tiles)

        # Save chunk
        self.GENERATED_CHUNKS[chunk_coordinates] = chunk

    def get_chunk(self, chunk_coordinates: tuple[int, int]) -> Chunk | None:
        if self.is_chunk_generated(chunk_coordinates):
            return self.GENERATED_CHUNKS[chunk_coordinates]

        return None

    def load_chunk(self, chunk_coordinates: tuple[int, int]) -> None:
        if self.is_chunk_generated(chunk_coordinates):
            self.LOADED_CHUNKS_COORDINATES.append(chunk_coordinates)

    def is_chunk_loaded(self, chunk_coordinates: tuple[int, int]) -> bool:
        return chunk_coordinates in self.LOADED_CHUNKS_COORDINATES

    def is_chunk_in_queue(self, chunk_coordinates: tuple[int, int]) -> bool:
        return chunk_coordinates in self.CHUNK_GENERATION_QUEUE.ITEMS

    def is_chunk_generated(self, chunk_coordinates: tuple[int, int]) -> bool:
        return chunk_coordinates in self.GENERATED_CHUNKS.keys()
